//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client1.NavigatorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationResult", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class AuthenticationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] mGroupNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.OperationResult mResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mUserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] mGroupNames {
            get {
                return this.mGroupNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.mGroupNamesField, value) != true)) {
                    this.mGroupNamesField = value;
                    this.RaisePropertyChanged("mGroupNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.OperationResult mResult {
            get {
                return this.mResultField;
            }
            set {
                if ((object.ReferenceEquals(this.mResultField, value) != true)) {
                    this.mResultField = value;
                    this.RaisePropertyChanged("mResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mUserId {
            get {
                return this.mUserIdField;
            }
            set {
                if ((this.mUserIdField.Equals(value) != true)) {
                    this.mUserIdField = value;
                    this.RaisePropertyChanged("mUserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mErrCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mErrMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mErrCode {
            get {
                return this.mErrCodeField;
            }
            set {
                if ((this.mErrCodeField.Equals(value) != true)) {
                    this.mErrCodeField = value;
                    this.RaisePropertyChanged("mErrCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mErrMessage {
            get {
                return this.mErrMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.mErrMessageField, value) != true)) {
                    this.mErrMessageField = value;
                    this.RaisePropertyChanged("mErrMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrowserDataResult", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class BrowserDataResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.FilesystemObject[] mDirectoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.FilesystemObject[] mFilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.OperationResult mResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string rootPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currPath {
            get {
                return this.currPathField;
            }
            set {
                if ((object.ReferenceEquals(this.currPathField, value) != true)) {
                    this.currPathField = value;
                    this.RaisePropertyChanged("currPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.FilesystemObject[] mDirectories {
            get {
                return this.mDirectoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.mDirectoriesField, value) != true)) {
                    this.mDirectoriesField = value;
                    this.RaisePropertyChanged("mDirectories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.FilesystemObject[] mFiles {
            get {
                return this.mFilesField;
            }
            set {
                if ((object.ReferenceEquals(this.mFilesField, value) != true)) {
                    this.mFilesField = value;
                    this.RaisePropertyChanged("mFiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.OperationResult mResult {
            get {
                return this.mResultField;
            }
            set {
                if ((object.ReferenceEquals(this.mResultField, value) != true)) {
                    this.mResultField = value;
                    this.RaisePropertyChanged("mResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string rootPath {
            get {
                return this.rootPathField;
            }
            set {
                if ((object.ReferenceEquals(this.rootPathField, value) != true)) {
                    this.rootPathField = value;
                    this.RaisePropertyChanged("rootPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilesystemObject", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class FilesystemObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mAccessBitsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mFilepathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mFilesizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mGidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool mIsDirFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool mIsExistsFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mObjNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mUidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mAccessBitset {
            get {
                return this.mAccessBitsetField;
            }
            set {
                if ((this.mAccessBitsetField.Equals(value) != true)) {
                    this.mAccessBitsetField = value;
                    this.RaisePropertyChanged("mAccessBitset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mFilepath {
            get {
                return this.mFilepathField;
            }
            set {
                if ((object.ReferenceEquals(this.mFilepathField, value) != true)) {
                    this.mFilepathField = value;
                    this.RaisePropertyChanged("mFilepath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mFilesize {
            get {
                return this.mFilesizeField;
            }
            set {
                if ((this.mFilesizeField.Equals(value) != true)) {
                    this.mFilesizeField = value;
                    this.RaisePropertyChanged("mFilesize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mGid {
            get {
                return this.mGidField;
            }
            set {
                if ((this.mGidField.Equals(value) != true)) {
                    this.mGidField = value;
                    this.RaisePropertyChanged("mGid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mId {
            get {
                return this.mIdField;
            }
            set {
                if ((this.mIdField.Equals(value) != true)) {
                    this.mIdField = value;
                    this.RaisePropertyChanged("mId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool mIsDirFlag {
            get {
                return this.mIsDirFlagField;
            }
            set {
                if ((this.mIsDirFlagField.Equals(value) != true)) {
                    this.mIsDirFlagField = value;
                    this.RaisePropertyChanged("mIsDirFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool mIsExistsFlag {
            get {
                return this.mIsExistsFlagField;
            }
            set {
                if ((this.mIsExistsFlagField.Equals(value) != true)) {
                    this.mIsExistsFlagField = value;
                    this.RaisePropertyChanged("mIsExistsFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mObjName {
            get {
                return this.mObjNameField;
            }
            set {
                if ((object.ReferenceEquals(this.mObjNameField, value) != true)) {
                    this.mObjNameField = value;
                    this.RaisePropertyChanged("mObjName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mUid {
            get {
                return this.mUidField;
            }
            set {
                if ((this.mUidField.Equals(value) != true)) {
                    this.mUidField = value;
                    this.RaisePropertyChanged("mUid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetUsersResult", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class GetUsersResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.OperationResult mResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.User[] mUsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.OperationResult mResult {
            get {
                return this.mResultField;
            }
            set {
                if ((object.ReferenceEquals(this.mResultField, value) != true)) {
                    this.mResultField = value;
                    this.RaisePropertyChanged("mResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.User[] mUsers {
            get {
                return this.mUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.mUsersField, value) != true)) {
                    this.mUsersField = value;
                    this.RaisePropertyChanged("mUsers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.Group[] GroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mPasswordHashField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.Group[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mId {
            get {
                return this.mIdField;
            }
            set {
                if ((this.mIdField.Equals(value) != true)) {
                    this.mIdField = value;
                    this.RaisePropertyChanged("mId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mName {
            get {
                return this.mNameField;
            }
            set {
                if ((object.ReferenceEquals(this.mNameField, value) != true)) {
                    this.mNameField = value;
                    this.RaisePropertyChanged("mName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mPasswordHash {
            get {
                return this.mPasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.mPasswordHashField, value) != true)) {
                    this.mPasswordHashField = value;
                    this.RaisePropertyChanged("mPasswordHash");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mId {
            get {
                return this.mIdField;
            }
            set {
                if ((this.mIdField.Equals(value) != true)) {
                    this.mIdField = value;
                    this.RaisePropertyChanged("mId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mName {
            get {
                return this.mNameField;
            }
            set {
                if ((object.ReferenceEquals(this.mNameField, value) != true)) {
                    this.mNameField = value;
                    this.RaisePropertyChanged("mName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetGroupsResult", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class GetGroupsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.Group[] mGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client1.NavigatorService.OperationResult mResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.Group[] mGroups {
            get {
                return this.mGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.mGroupsField, value) != true)) {
                    this.mGroupsField = value;
                    this.RaisePropertyChanged("mGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client1.NavigatorService.OperationResult mResult {
            get {
                return this.mResultField;
            }
            set {
                if ((object.ReferenceEquals(this.mResultField, value) != true)) {
                    this.mResultField = value;
                    this.RaisePropertyChanged("mResult");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NavigatorService.NavigatorIService")]
    public interface NavigatorIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/Authentication", ReplyAction="http://tempuri.org/NavigatorIService/AuthenticationResponse")]
        Client1.NavigatorService.AuthenticationResult Authentication(string username, string p_hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/Authentication", ReplyAction="http://tempuri.org/NavigatorIService/AuthenticationResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.AuthenticationResult> AuthenticationAsync(string username, string p_hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetRootDirForUser", ReplyAction="http://tempuri.org/NavigatorIService/GetRootDirForUserResponse")]
        Client1.NavigatorService.BrowserDataResult GetRootDirForUser(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetRootDirForUser", ReplyAction="http://tempuri.org/NavigatorIService/GetRootDirForUserResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.BrowserDataResult> GetRootDirForUserAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetListOfData", ReplyAction="http://tempuri.org/NavigatorIService/GetListOfDataResponse")]
        Client1.NavigatorService.BrowserDataResult GetListOfData(int idUser, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetListOfData", ReplyAction="http://tempuri.org/NavigatorIService/GetListOfDataResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.BrowserDataResult> GetListOfDataAsync(int idUser, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddFile", ReplyAction="http://tempuri.org/NavigatorIService/AddFileResponse")]
        Client1.NavigatorService.ManFilesystemObjResult AddFile(Client1.NavigatorService.RemoteFileInfo request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddFile", ReplyAction="http://tempuri.org/NavigatorIService/AddFileResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.ManFilesystemObjResult> AddFileAsync(Client1.NavigatorService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddDirectory", ReplyAction="http://tempuri.org/NavigatorIService/AddDirectoryResponse")]
        Client1.NavigatorService.ManFilesystemObjResult AddDirectory(Client1.NavigatorService.UserNostreamOperationRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddDirectory", ReplyAction="http://tempuri.org/NavigatorIService/AddDirectoryResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.ManFilesystemObjResult> AddDirectoryAsync(Client1.NavigatorService.UserNostreamOperationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteObject", ReplyAction="http://tempuri.org/NavigatorIService/DeleteObjectResponse")]
        Client1.NavigatorService.ManFilesystemObjResult DeleteObject(Client1.NavigatorService.UserNostreamOperationRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteObject", ReplyAction="http://tempuri.org/NavigatorIService/DeleteObjectResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.ManFilesystemObjResult> DeleteObjectAsync(Client1.NavigatorService.UserNostreamOperationRequest request);
        
        // CODEGEN: Контракт генерации сообщений с именем упаковщика (DownloadFilesystemRequest) сообщения DownloadFilesystemRequest не соответствует значению по умолчанию (DownloadFile).
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DownloadFile", ReplyAction="http://tempuri.org/NavigatorIService/DownloadFileResponse")]
        Client1.NavigatorService.DownloadFileResult DownloadFile(Client1.NavigatorService.DownloadFilesystemRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DownloadFile", ReplyAction="http://tempuri.org/NavigatorIService/DownloadFileResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.DownloadFileResult> DownloadFileAsync(Client1.NavigatorService.DownloadFilesystemRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddUser", ReplyAction="http://tempuri.org/NavigatorIService/AddUserResponse")]
        Client1.NavigatorService.OperationResult AddUser(int idUser, string Username, string password_hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddUser", ReplyAction="http://tempuri.org/NavigatorIService/AddUserResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> AddUserAsync(int idUser, string Username, string password_hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteUser", ReplyAction="http://tempuri.org/NavigatorIService/DeleteUserResponse")]
        Client1.NavigatorService.OperationResult DeleteUser(int idUser, int idUserToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteUser", ReplyAction="http://tempuri.org/NavigatorIService/DeleteUserResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> DeleteUserAsync(int idUser, int idUserToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetUsers", ReplyAction="http://tempuri.org/NavigatorIService/GetUsersResponse")]
        Client1.NavigatorService.GetUsersResult GetUsers(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetUsers", ReplyAction="http://tempuri.org/NavigatorIService/GetUsersResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.GetUsersResult> GetUsersAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetGroups", ReplyAction="http://tempuri.org/NavigatorIService/GetGroupsResponse")]
        Client1.NavigatorService.GetGroupsResult GetGroups(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/GetGroups", ReplyAction="http://tempuri.org/NavigatorIService/GetGroupsResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.GetGroupsResult> GetGroupsAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddGroup", ReplyAction="http://tempuri.org/NavigatorIService/AddGroupResponse")]
        Client1.NavigatorService.OperationResult AddGroup(int idUser, string groupname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddGroup", ReplyAction="http://tempuri.org/NavigatorIService/AddGroupResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> AddGroupAsync(int idUser, string groupname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteGroup", ReplyAction="http://tempuri.org/NavigatorIService/DeleteGroupResponse")]
        Client1.NavigatorService.OperationResult DeleteGroup(int idUser, int idGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteGroup", ReplyAction="http://tempuri.org/NavigatorIService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> DeleteGroupAsync(int idUser, int idGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddUserToGroup", ReplyAction="http://tempuri.org/NavigatorIService/AddUserToGroupResponse")]
        Client1.NavigatorService.OperationResult AddUserToGroup(int idUser, int targetUserID, int targetGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/AddUserToGroup", ReplyAction="http://tempuri.org/NavigatorIService/AddUserToGroupResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> AddUserToGroupAsync(int idUser, int targetUserID, int targetGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteUserFromGroup", ReplyAction="http://tempuri.org/NavigatorIService/DeleteUserFromGroupResponse")]
        Client1.NavigatorService.OperationResult DeleteUserFromGroup(int idUser, int targetUserID, int targetGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/DeleteUserFromGroup", ReplyAction="http://tempuri.org/NavigatorIService/DeleteUserFromGroupResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> DeleteUserFromGroupAsync(int idUser, int targetUserID, int targetGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/ChangeAccess", ReplyAction="http://tempuri.org/NavigatorIService/ChangeAccessResponse")]
        Client1.NavigatorService.OperationResult ChangeAccess(int idUser, int idObject, int newAccessBitset, int newOwnerID, int newGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NavigatorIService/ChangeAccess", ReplyAction="http://tempuri.org/NavigatorIService/ChangeAccessResponse")]
        System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> ChangeAccessAsync(int idUser, int idObject, int newAccessBitset, int newOwnerID, int newGroupID);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public Client1.NavigatorService.FilesystemObject mMetaFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream mFileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(Client1.NavigatorService.FilesystemObject mMetaFile, System.IO.Stream mFileByteStream) {
            this.mMetaFile = mMetaFile;
            this.mFileByteStream = mFileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ManFilesystemObjResult", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ManFilesystemObjResult {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Client1.NavigatorService.OperationResult mResult;
        
        public ManFilesystemObjResult() {
        }
        
        public ManFilesystemObjResult(int fileId, Client1.NavigatorService.OperationResult mResult) {
            this.fileId = fileId;
            this.mResult = mResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserNostreamOperationRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UserNostreamOperationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int accessBitset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string currDir;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int idGroup;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int idUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string newDirName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public Client1.NavigatorService.FilesystemObject obj;
        
        public UserNostreamOperationRequest() {
        }
        
        public UserNostreamOperationRequest(int accessBitset, string currDir, int idGroup, int idUser, string newDirName, Client1.NavigatorService.FilesystemObject obj) {
            this.accessBitset = accessBitset;
            this.currDir = currDir;
            this.idGroup = idGroup;
            this.idUser = idUser;
            this.newDirName = newDirName;
            this.obj = obj;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFilesystemRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFilesystemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string mFilename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int mUserId;
        
        public DownloadFilesystemRequest() {
        }
        
        public DownloadFilesystemRequest(string mFilename, int mUserId) {
            this.mFilename = mFilename;
            this.mUserId = mUserId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileResult", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileResult {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public Client1.NavigatorService.FilesystemObject mObj;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int mOrigFilesize;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public Client1.NavigatorService.OperationResult mResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream mFileByteStream;
        
        public DownloadFileResult() {
        }
        
        public DownloadFileResult(Client1.NavigatorService.FilesystemObject mObj, int mOrigFilesize, Client1.NavigatorService.OperationResult mResult, System.IO.Stream mFileByteStream) {
            this.mObj = mObj;
            this.mOrigFilesize = mOrigFilesize;
            this.mResult = mResult;
            this.mFileByteStream = mFileByteStream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NavigatorIServiceChannel : Client1.NavigatorService.NavigatorIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NavigatorIServiceClient : System.ServiceModel.ClientBase<Client1.NavigatorService.NavigatorIService>, Client1.NavigatorService.NavigatorIService {
        
        public NavigatorIServiceClient() {
        }
        
        public NavigatorIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NavigatorIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NavigatorIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NavigatorIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client1.NavigatorService.AuthenticationResult Authentication(string username, string p_hash) {
            return base.Channel.Authentication(username, p_hash);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.AuthenticationResult> AuthenticationAsync(string username, string p_hash) {
            return base.Channel.AuthenticationAsync(username, p_hash);
        }
        
        public Client1.NavigatorService.BrowserDataResult GetRootDirForUser(int idUser) {
            return base.Channel.GetRootDirForUser(idUser);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.BrowserDataResult> GetRootDirForUserAsync(int idUser) {
            return base.Channel.GetRootDirForUserAsync(idUser);
        }
        
        public Client1.NavigatorService.BrowserDataResult GetListOfData(int idUser, string path) {
            return base.Channel.GetListOfData(idUser, path);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.BrowserDataResult> GetListOfDataAsync(int idUser, string path) {
            return base.Channel.GetListOfDataAsync(idUser, path);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client1.NavigatorService.ManFilesystemObjResult Client1.NavigatorService.NavigatorIService.AddFile(Client1.NavigatorService.RemoteFileInfo request) {
            return base.Channel.AddFile(request);
        }
        
        public int AddFile(Client1.NavigatorService.FilesystemObject mMetaFile, System.IO.Stream mFileByteStream, out Client1.NavigatorService.OperationResult mResult) {
            Client1.NavigatorService.RemoteFileInfo inValue = new Client1.NavigatorService.RemoteFileInfo();
            inValue.mMetaFile = mMetaFile;
            inValue.mFileByteStream = mFileByteStream;
            Client1.NavigatorService.ManFilesystemObjResult retVal = ((Client1.NavigatorService.NavigatorIService)(this)).AddFile(inValue);
            mResult = retVal.mResult;
            return retVal.fileId;
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.ManFilesystemObjResult> AddFileAsync(Client1.NavigatorService.RemoteFileInfo request) {
            return base.Channel.AddFileAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client1.NavigatorService.ManFilesystemObjResult Client1.NavigatorService.NavigatorIService.AddDirectory(Client1.NavigatorService.UserNostreamOperationRequest request) {
            return base.Channel.AddDirectory(request);
        }
        
        public int AddDirectory(int accessBitset, string currDir, int idGroup, int idUser, string newDirName, Client1.NavigatorService.FilesystemObject obj, out Client1.NavigatorService.OperationResult mResult) {
            Client1.NavigatorService.UserNostreamOperationRequest inValue = new Client1.NavigatorService.UserNostreamOperationRequest();
            inValue.accessBitset = accessBitset;
            inValue.currDir = currDir;
            inValue.idGroup = idGroup;
            inValue.idUser = idUser;
            inValue.newDirName = newDirName;
            inValue.obj = obj;
            Client1.NavigatorService.ManFilesystemObjResult retVal = ((Client1.NavigatorService.NavigatorIService)(this)).AddDirectory(inValue);
            mResult = retVal.mResult;
            return retVal.fileId;
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.ManFilesystemObjResult> AddDirectoryAsync(Client1.NavigatorService.UserNostreamOperationRequest request) {
            return base.Channel.AddDirectoryAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client1.NavigatorService.ManFilesystemObjResult Client1.NavigatorService.NavigatorIService.DeleteObject(Client1.NavigatorService.UserNostreamOperationRequest request) {
            return base.Channel.DeleteObject(request);
        }
        
        public int DeleteObject(int accessBitset, string currDir, int idGroup, int idUser, string newDirName, Client1.NavigatorService.FilesystemObject obj, out Client1.NavigatorService.OperationResult mResult) {
            Client1.NavigatorService.UserNostreamOperationRequest inValue = new Client1.NavigatorService.UserNostreamOperationRequest();
            inValue.accessBitset = accessBitset;
            inValue.currDir = currDir;
            inValue.idGroup = idGroup;
            inValue.idUser = idUser;
            inValue.newDirName = newDirName;
            inValue.obj = obj;
            Client1.NavigatorService.ManFilesystemObjResult retVal = ((Client1.NavigatorService.NavigatorIService)(this)).DeleteObject(inValue);
            mResult = retVal.mResult;
            return retVal.fileId;
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.ManFilesystemObjResult> DeleteObjectAsync(Client1.NavigatorService.UserNostreamOperationRequest request) {
            return base.Channel.DeleteObjectAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client1.NavigatorService.DownloadFileResult Client1.NavigatorService.NavigatorIService.DownloadFile(Client1.NavigatorService.DownloadFilesystemRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public Client1.NavigatorService.FilesystemObject DownloadFile(string mFilename, int mUserId, out int mOrigFilesize, out Client1.NavigatorService.OperationResult mResult, out System.IO.Stream mFileByteStream) {
            Client1.NavigatorService.DownloadFilesystemRequest inValue = new Client1.NavigatorService.DownloadFilesystemRequest();
            inValue.mFilename = mFilename;
            inValue.mUserId = mUserId;
            Client1.NavigatorService.DownloadFileResult retVal = ((Client1.NavigatorService.NavigatorIService)(this)).DownloadFile(inValue);
            mOrigFilesize = retVal.mOrigFilesize;
            mResult = retVal.mResult;
            mFileByteStream = retVal.mFileByteStream;
            return retVal.mObj;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client1.NavigatorService.DownloadFileResult> Client1.NavigatorService.NavigatorIService.DownloadFileAsync(Client1.NavigatorService.DownloadFilesystemRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.DownloadFileResult> DownloadFileAsync(string mFilename, int mUserId) {
            Client1.NavigatorService.DownloadFilesystemRequest inValue = new Client1.NavigatorService.DownloadFilesystemRequest();
            inValue.mFilename = mFilename;
            inValue.mUserId = mUserId;
            return ((Client1.NavigatorService.NavigatorIService)(this)).DownloadFileAsync(inValue);
        }
        
        public Client1.NavigatorService.OperationResult AddUser(int idUser, string Username, string password_hash) {
            return base.Channel.AddUser(idUser, Username, password_hash);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> AddUserAsync(int idUser, string Username, string password_hash) {
            return base.Channel.AddUserAsync(idUser, Username, password_hash);
        }
        
        public Client1.NavigatorService.OperationResult DeleteUser(int idUser, int idUserToDelete) {
            return base.Channel.DeleteUser(idUser, idUserToDelete);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> DeleteUserAsync(int idUser, int idUserToDelete) {
            return base.Channel.DeleteUserAsync(idUser, idUserToDelete);
        }
        
        public Client1.NavigatorService.GetUsersResult GetUsers(int idUser) {
            return base.Channel.GetUsers(idUser);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.GetUsersResult> GetUsersAsync(int idUser) {
            return base.Channel.GetUsersAsync(idUser);
        }
        
        public Client1.NavigatorService.GetGroupsResult GetGroups(int idUser) {
            return base.Channel.GetGroups(idUser);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.GetGroupsResult> GetGroupsAsync(int idUser) {
            return base.Channel.GetGroupsAsync(idUser);
        }
        
        public Client1.NavigatorService.OperationResult AddGroup(int idUser, string groupname) {
            return base.Channel.AddGroup(idUser, groupname);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> AddGroupAsync(int idUser, string groupname) {
            return base.Channel.AddGroupAsync(idUser, groupname);
        }
        
        public Client1.NavigatorService.OperationResult DeleteGroup(int idUser, int idGroup) {
            return base.Channel.DeleteGroup(idUser, idGroup);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> DeleteGroupAsync(int idUser, int idGroup) {
            return base.Channel.DeleteGroupAsync(idUser, idGroup);
        }
        
        public Client1.NavigatorService.OperationResult AddUserToGroup(int idUser, int targetUserID, int targetGroupID) {
            return base.Channel.AddUserToGroup(idUser, targetUserID, targetGroupID);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> AddUserToGroupAsync(int idUser, int targetUserID, int targetGroupID) {
            return base.Channel.AddUserToGroupAsync(idUser, targetUserID, targetGroupID);
        }
        
        public Client1.NavigatorService.OperationResult DeleteUserFromGroup(int idUser, int targetUserID, int targetGroupID) {
            return base.Channel.DeleteUserFromGroup(idUser, targetUserID, targetGroupID);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> DeleteUserFromGroupAsync(int idUser, int targetUserID, int targetGroupID) {
            return base.Channel.DeleteUserFromGroupAsync(idUser, targetUserID, targetGroupID);
        }
        
        public Client1.NavigatorService.OperationResult ChangeAccess(int idUser, int idObject, int newAccessBitset, int newOwnerID, int newGroupID) {
            return base.Channel.ChangeAccess(idUser, idObject, newAccessBitset, newOwnerID, newGroupID);
        }
        
        public System.Threading.Tasks.Task<Client1.NavigatorService.OperationResult> ChangeAccessAsync(int idUser, int idObject, int newAccessBitset, int newOwnerID, int newGroupID) {
            return base.Channel.ChangeAccessAsync(idUser, idObject, newAccessBitset, newOwnerID, newGroupID);
        }
    }
}
